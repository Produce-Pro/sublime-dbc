%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: dbc
file_extensions:
  - PRG
  - TXT
  - VRB
scope: source.dbc

variables:
  # Characters that break up variables/functions
  brk: '[^\(\)\[\]\w~]'
  operands: '\b((?i)by|to|of|from|using|with|in|into)\b'

  control_keywords: '((?i)break|switch|case|continue|do|else|for|if|return|switch|while|endif|loop|until|repeat|endswitch)'
  basic_types: '((?i)(char|form|init|num|float|int|integer|var|dim))'
  constant_types: '((?i)(define|equ))'
  advanced_types: '((?i)record|object|external|label)'
  file_types: 'file|ifile|afile'
  compiler_directive: '\#ifdef|\#endif|\#ifndef|\#iflabel'
  valid_functions: '[[:alpha:]_\$][[:alnum:]_\.\$@]*'
  valid_variables: '[[:alpha:]_\$][[:alnum:]_\.\$@]*'
  assignment_keywords: 'move|to|with'

contexts:

  prototype:
  - include: line_comments
  main:
    - include: variable_punctuation
    - include: routine_definition
    - include: types
    - include: strings
    # - include: keywords
    # - include: operators
    # - include: operands
    - include: numbers
    - include: dbc_constants
    # - include: verb_calls

  variable_punctuation:
    - match: \$\.
      scope: punctuation.definition.variable

  line_comments:
    # Comments begin with a [# .] and finish at the end of the line
    - match: '^[\.\*]'
      scope: punctuation.definition.comment.dbc
      push:
        - meta_scope: comment.line.dbc
        - match: $\n
          pop: true

  end_of_line_comments:
    # Comments begin with a [# .] and finish at the end of the line
    - match: ^[\.\*]
      scope: punctuation.definition.comment.dbc
      push:
        - meta_scope: comment.dbc
        - match: $
          pop: true

  keywords:
    - match: (?i)\s+({{control_keywords}})\s
      scope: keyword.control.dbc

  numbers:
    # Numbers
    - match: (-)?((\b[0-9]+\.[0-9]+)|(\s\.[0-9]+\b)|(\b[0-9]+)|)\b
      scope: constant.numeric.dbc

  dbc_constants:
    - match: \@
      scope: constant.language.dbc

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.dbc
      push:
        - meta_scope: meta.brackets.dbc
        - match: \]
          scope: punctuation.section.brackets.end.dbc
          pop: true
        - include: expressions


  # Write it to check if it starts beginning of line
  # Label
  # Routines
  # External label includes
  # Constants
  # Variables
  # Lists
  # Objects
  types:
    - match: (^{{valid_variables}})(\s+{{constant_types}})
      captures:
        1: entity.name.constant
        2: storage.modifier.dbc

    - match: (^{{valid_variables}})(\s+{{basic_types}})
      captures:
        1: entity.name.type
        2: storage.type.dbc

    - match: (^{{valid_variables}})(\s+{{advanced_types}})
      captures:
        1: entity.name.type
        2: storage.type.dbc


    # Strings begin and end with quotes, and use pound signs as an escape
    # character
  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.dbc
      push:
        - meta_scope: string.quoted.double.dbc
        - match: '\#.'
          scope: constant.character.escape.dbc
        - match: '"'
          scope: punctuation.definition.string.end.dbc
          pop: true


  operators:
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    - match: \+|\-|/|%|\||\^|~|!|\*
      scope: keyword.operator.arithmetic.c
    - match: \=
      scope: keyword.operator.assignment.c

  operand_seperators:
    - match: ',|~'
      scope: punctuation.separator.dbc
    - match: :\n
      scope: punctuation.separator.c
    - match: '{{operands}}'
      scope: punctuation.separator.c

  verb_calls:
    - match: (^\s+{{valid_functions}}\b)
      scope: variable.function.verb.c


  call_function:
    - match: (^\s+{{valid_functions}}\s+)

  routine_definition:
    - match: (^{{valid_functions}}\s+((?i)(routine|lroutine)))
      captures:
        1: entity.name.function.dbc
        2: storage.type.dbc
      push:
        - include: parameters

  parameters:
    - match: \s({{valid_variables}}|~{{valid_functions}})
      scope: variable.parameter.dbc
    - include: operand_seperators
    - match: ({{valid_variables}}|~{{valid_functions}})
      scope: variable.parameter.dbc
    - match: $\n
      pop: true

  expressions:
    - match: \(
