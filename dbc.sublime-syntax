%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: dbc
file_extensions:
  - PRG
  - TXT
  - VRB
scope: source.dbc

variables:
  # Characters that break up variables/functions
  #  with lookahead to ignore .$
  variable_punctuation: '\$\.\@'
  end: '(?![[:alnum:]_\.\$\@])'
  sp: '[ \t]'
  pre: ^{{sp}}+
  numbers: '(-)?(([0-9]+\.[0-9]+)|(\.[0-9]+)|([0-9]+))'
  operands: '((?i)by|to|of|from|using|with|in|into)'
  constants: '(?i)not|eos|over|equal|less|zero'
  valid_functions: '[[:alpha:]_\$][[:alnum:]_\.\$\@]*'
  valid_variables: '[[:alpha:]_\$][[:alnum:]_\.\$\@]*'
  alter_paren_keywords: '(?i)(sqznum|form|char|squeeze|trim|size|length|chop){{end}}'
  system_functions1: '(?i)retcount|clearlabel|testadr|testlabel|flagrest|flagrestore|staterest|staterestore|traprest|traprestore|statesave|winsave|flagsave|winrestore|winrest|charsave|charrestore|charrest|statesize|winsize|scrnsave|scrnrestore|scrnrest'
  system_functions2: '(?i)clear|clearadr|set|reset'
  system_functions3: '(?i)moveadr|chop|trim|squeeze|replace|movelabel|scan|rep'
  system_functions4: '(?i)move|fill|pack|unpack|packlen|type|append'

contexts:

  prototype:
    - include: line-comments
    - include: strings

  main:
    - include: variable-punctuation
    - include: verb-definition
    - include: routine-definition
    - include: label-definition
    - include: variable-definitions
    - include: invalid-keywords
    - include: statements

  # Nested scope, interloop and others are valid
  nested:
    - include: variable-punctuation
    - include: verb-definition
    - include: routine-definition
    - include: label-definition
    - include: variable-definitions
    - include: interloop-keywords
    - include: statements

  line-comments:
    # Comments begin with a [# .] and finish at the end of the line
    - match: '^[\.\*]'
      scope: punctuation.definition.comment.dbc
      push:
        - meta_scope: comment.line.dbc
        - match: (?<!^)$\n
          pop: true

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.dbc
      push:
        - meta_scope: string.quoted.double.dbc
        - match: '\#.'
          scope: constant.character.escape.dbc
        - match: '"'
          scope: punctuation.definition.string.end.dbc
          pop: true
        - match: (?<!^)$\n
          scope: invalid.illegal.dbc
          pop: true

  variable-punctuation:
    - match: '{{variable_punctuation}}'
      scope: punctuation.definition.variable.dbc

  verb-definition:
    - match: ^({{valid_functions}}){{sp}}+((?i)(verb))
      captures:
        1: entity.name.function.verb.dbc
        2: storage.type.verb.dbc
      push:
          - meta_scope: meta.function.dbc
          - match: (?<!^)$\n
            pop: true
          - match: ''
            set: verb-definition-parameters

  verb-definition-parameters:
    - meta_scope: meta.function.parameters.dbc
    - match: (?<!^)$\n
      pop: true
    - include: expression-seperators
    - match: ([\#\=])\b((?i)(array|afile|any|carray|carray1|carray2|carray3|cnvar|cnvarlit|comfile|cvar|cvarlit|device|file|ifile|image|list|label|nvar|nvarlit|varlit)\b)
      captures:
        1: keyword.operator.assignment.dbc
        2: variable.language.dbc
    - match: '({{valid_variables}})'
      scope: variable.parameter.dbc

  routine-definition:
    - match: ^({{valid_functions}}){{sp}}+((?i)(routine|lroutine))
      captures:
        1: entity.name.function.routine.dbc
        2: storage.type.routine.start.dbc
      push:
        - routine-definition-body
        - routine-definition-parameters

  routine-definition-parameters:
    - match: (?<!^)$\n
      pop: true
    - match: '{{sp}}'
      set:
      - meta_scope: meta.function.parameters.dbc
      - match: ({{valid_variables}}|~{{valid_functions}})
        scope: variable.parameter.dbc
      - include: expression-seperators
      - match: '(?<!^)$\n'
        pop: true


  routine-definition-body:
    - meta_scope: meta.function.dbc
    - match: '{{pre}}(?i)endroutine'
      scope: storage.type.routine.end.dbc
      set: eol-comments
    - include: nested

  label-definition:
    - match: ^({{valid_functions}})(\n)
      captures:
        1: entity.name.function.label.dbc

  variable-definitions:
    - include: standard-types
    - include: label-types
    - include: list-types

  standard-types:
    - include: constant-types
    - include: character-types
    - include: numeric-types

  compiler-directive:
    - meta_scope: meta.preprocessor.dbc
    - match: '{{pre}}[\#\%](?i)(ifz|ifnz|ifdef|ifdef|ifdef|ifndef|ifndef|ifndef|iflabel|ifnlabel|elseif|if)'
      scope: storage.modifier.dbc
      push: compiler-directive-args
    - match: '{{pre}}[\#\%]\w*'
      scope: invalid.illegal.dbc


  compiler-directive-args:
    - include: arguments
    - match: (?<!^)$\n
      set: compiler-directive-body

  compiler-directive-body:
    - meta_scope: meta.compiler-directive.dbc
    - match: '{{pre}}(?i)[\#\%](else|endif)'
      scope: storage.modifier.dbc
      set:
        - include: eol-comments
        - match: ''
          pop: true
    - include: nested

  file-includes:
    - match: '{{pre}}(?i)inc{{sp}}'
      scope: support.type.include.dbc
      push:
        - meta_scope: meta.include.dbc
        - match: '({{valid_variables}})\n'
          captures:
            1: string.unquoted
          pop: true
        - match: '(?<!^)$\n'
          pop: true

  chain-to:
    - match: '{{pre}}(?i)chain{{sp}}'
      scope: support.type.chain.dbc
      push:
        - meta_scope: meta.chain.dbc
        - match: '({{valid_variables}})\n'
          captures:
            1: string.unquoted
          pop: true
        - match: '(?<!^)$\n'
          pop: true

  constant-types:
    - match: (^{{valid_variables}})({{sp}}+((?i)(define|equ)))
      captures:
        1: entity.name.constant.dbc
        2: storage.modifier.dbc

      push:
        - meta_scope: meta.type.constant.dbc
        - match: '{{sp}}{{numbers}}'
          scope: constant.numeric.dbc
        - match: '(?<!^)$\n'
          pop: true
        - include: eol-comments

  character-types:
    - match: (^{{valid_variables}})({{sp}}+((?i)char|dim|init))
      captures:
        1: entity.name.type.dbc
        2: storage.type.dbc

      push:
        - meta_scope: meta.type.dbc
        - match: '{{sp}}{{numbers}}'
          scope: constant.numeric.dbc
          set:
            - include: brackets
            - match: ', (?i)initial'
              scope: storage.modifier.dbc
              set: eol-arguments
            - include: eol-comments
        - match: \s\@
          scope: storage.modifier.dbc
          set:
            - include: brackets
            - match: ', (?i)initial'
              scope: storage.modifier.dbc
              set: eol-arguments
            - include: eol-comments
        - match: (?<!^)$\n
          pop: true

  numeric-types:
    - match: (^{{valid_variables}})({{sp}}+((?i)form|num|int|float)\b)
      captures:
        1: entity.name.type.dbc
        2: storage.type.dbc

      push:
        - meta_scope: meta.type.dbc
        - match: '{{sp}}{{numbers}}'
          scope: constant.numeric.dbc
          set:
            - include: brackets
            - match: ', '
              scope: storage.modifier.dbc
              set: eol-arguments
            - include: eol-comments
        - match: \s\@
          scope: storage.modifier.dbc
          set:
            - include: brackets
            - match: ', '
              scope: storage.modifier.dbc
              set:
                - include: eol-arguments

            - include: eol-comments
        - match: (?<!^)$\n
          pop: true

  label-types:
    - match: (^{{valid_variables}})((?i){{sp}}+(external|label)\b)
      captures:
        1: entity.name.function.dbc
        2: storage.type.dbc
      push:
        - match: '(?<!^)$\n'
          pop: true
        - match: \s\@
          scope: storage.modifier.dbc
        - include: eol-comments

  list-types:
    - match: (^{{valid_variables}})((?i){{sp}}+((?i)list)\b)
      captures:
        1: entity.name.list.dbc
        2: storage.type.dbc
      push:
        - meta_scope: meta.list.dbc
        - match: \s\@
          scope: storage.modifier.dbc
          pop: true
        - match: '(?<!^)$\n'
          set:
          - meta_scope: meta.list.dbc
          - match: '^{{sp}}+(?i)(listend\b)'
            scope: storage.type.dbc
            pop: true
          - include: standard-types

  statements:
    - include: compiler-directive
    - include: file-includes
    - include: chain-to
    - include: if-keyword
    - include: loop-keyword
    - include: for-keyword
    - include: switch-keyword
    - include: function-keywords
    - include: support-functions
    - include: verb-call

  eol-comments:
    - match: ''
      set:
        - meta_scope: comment.line.dbc
        - match: (?<!^)$\n
          pop: true

  eol-invalid:
    - match: ''
      set:
        - meta_scope: invalid.illegal.dbc
        - match: (?<!^)$\n
          pop: true


  invalid-keywords:
    - match: '{{pre}}(?i)(continue|break|repeat|endif|endswitch|endroutine){{end}}'
      scope: invalid.illegal.dbc
    - match: (?i)[\%\#]endif
      scope: invalid.illegal.dbc

  if-keyword:
    - match: '{{pre}}+(?i)if{{end}}'
      scope: keyword.control.dbc
      push: if-keyword-arguments

  if-keyword-arguments:
    - include: if-arguments
    - match: (?<!^)$\n
      set: if-keyword-body

  if-arguments:
    - match: '{{constants}}'
      scope: constant.language.dbc
    - match: '\('
      scope: punctuation.section.parentheses.begin.dbc
      push: if-parentheses

  if-parentheses:
    - meta_scope: meta.parens.if.dbc
    - match: '\)'
      scope: punctuation.section.parentheses.end.dbc
      pop: true
    - match: '{{constants}}'
      scope: constant.language.dbc
    - match: '(<\=|>\=|\=|<|>|\!\=)'
      scope: keyword.operator.comparison.dbc
    - match: '(?i)(or|and)'
      scope: keyword.operator.word.dbc
    - include: parentheses-body
    - match: '\('
      scope: punctuation.section.parentheses.begin.dbc
      push: if-parentheses
    - match: '{{sp}}*:$\n'
      scope: punctuation.separator.dbc
    - match: (?<!^)$\n
      scope: invalid.illegal.dbc
      pop: true

  parentheses-body:
    - match: (\+|\-|/|%|\||\^|~|!|\*)
      scope: keyword.operator.arithmetic.dbc
    - include: number-constants
    - match: '{{alter_paren_keywords}}'
      scope: support.function.builtin.dbc
    - match: '({{valid_variables}})'
      scope: variable.other.dbc


  if-keyword-body:
    - meta_scope: meta.control.if.dbc
    - match: '{{pre}}(?i)endif{{end}}'
      scope: keyword.control.dbc
      pop: true
    - match: '{{pre}}(?i)else if{{end}}'
      scope: keyword.control.dbc
      set: if-keyword-arguments
    - match: '{{pre}}(?i)else{{end}}'
      scope: keyword.control.dbc
    - include: nested

  eol-if-keyword:
    - match: (?i)if{{end}}
      scope: keyword.control.dbc
      push:
        - meta_scope: meta.control.if.dbc
        - include: if-arguments
        - match: (?<!^)$\n
          pop: true
    - match: ''
      pop: true

  loop-keyword:
    - match: '{{pre}}(?i)loop{{end}}'
      scope: keyword.control.dbc
      push:
        - meta_scope: meta.control.loop.dbc
        - match: '{{pre}}(?i)repeat{{end}}'
          scope: keyword.control.dbc
          pop: true
        - include: interloop-keywords
        - include: nested

  interloop-keywords:
    - match: '{{pre}}(?i)(continue|break|until){{end}}'
      scope: keyword.control.dbc
      push:
        - match: "{{sp}}+"
          push: eol-if-keyword
        - match: ''
          pop: true

  for-keyword:
    - match: '{{pre}}(?i)for{{sp}}+'
      scope: keyword.control.dbc
      push: for-keyword1

  for-keyword1:
    - match: '{{valid_variables}}'
      scope: variable.other.dbc
      set: for-keyword2
    - include: eol-invalid

  for-keyword2:
    - match: '{{sp}}+{{operands}}{{sp}}+'
      scope: support.type.dbc
      set: for-keyword3
    - match: '{{sp}}*,{{sp}}*'
      scope: punctuation.separator.dbc
      set: for-keyword3
    - include: eol-invalid


  for-keyword3:
    - meta_scope: meta.control.for.arguments.dbc
    - match: '{{valid_variables}}'
      scope: variable.other.dbc
      set: for-keyword4
    - match: '{{numbers}}'
      scope: constant.numeric.dbc
      set: for-keyword4
    - include: for-keyword3-parens
    - include: eol-invalid

  for-keyword3-parens:
    - meta_scope: meta.control.for.arguments.dbc
    - match: '\('
      scope: punctuation.section.parentheses.begin.dbc
      set:
          - match: '\)'
            scope: punctuation.section.parentheses.begin.dbc
            set: for-keyword4
          - include: for-keyword3-parens
          - include: parentheses-body

  for-keyword4:
    - match: '{{sp}}+{{operands}}{{sp}}+'
      scope: support.type.dbc
      set: for-keyword5
    - match: '{{sp}}*,{{sp}}*'
      scope: punctuation.separator.dbc
      set: for-keyword5
    - include: eol-invalid

  for-keyword5:
    - meta_scope: meta.control.for.arguments.dbc
    - match: '{{valid_variables}}'
      scope: variable.other.dbc
      set: for-keyword-body
    - match: '{{numbers}}'
      scope: constant.numeric.dbc
      set: for-keyword-body
    - include: for-keyword5-parens
    - include: eol-invalid

  for-keyword5-parens:
    - match: '\('
      scope: punctuation.section.parentheses.begin.dbc
      set:
          - match: '\)'
            scope: punctuation.section.parentheses.begin.dbc
            set: for-keyword-body
          - include: for-keyword5-parens
          - include: parentheses-body

  for-keyword-body:
    - match: \n
      set:
        - meta_scope: meta.control.for.dbc
        - match: '{{pre}}(?i)repeat{{end}}'
          scope: keyword.control.dbc
          pop: true
        - include: interloop-keywords
        - include: nested
    - include: eol-invalid

  switch-keyword:
    - match: '{{pre}}(?i)switch{{end}}'
      scope: keyword.control.dbc
      push: switch-keyword1

  switch-keyword1:
    - match: '{{sp}}*{{valid_variables}}'
      scope: variable.other.dbc
      set: switch-keyword3
    - include: eol-invalid

  switch-keyword3:
    - include: brackets
    - match: '\n'
      set: switch-keyword-body
    - include: eol-invalid

  switch-keyword-body:
    - meta_scope: meta.control.switch.dbc
    - match: '{{pre}}(?i)endswitch{{end}}'
      scope: keyword.control.dbc
      pop: true
    - match: '{{pre}}(?i)case'
      scope: keyword.control.dbc
      push: case-keyword-parameters
    - match: '{{pre}}(?i)default'
      scope: keyword.control.dbc
    - include: nested

  case-keyword-parameters:
    - meta_scope: meta.control.case.dbc
    - match: '(OR|\|)'
      scope: keyword.operator.arithmetic.c
    - match: '{{numbers}}'
      scope: constant.numeric.dbc
    - match: '~{{valid_functions}}'
      scope: variable.function.dbc
    - match: '{{valid_variables}}'
      scope: variable.other.dbc
    - match: (?<!^)$\n
      pop: true


  flag-constants:
    - match: '{{constants}}'
      scope: constant.language.dbc

  number-constants:
    - match: '{{numbers}}'
      scope: constant.numeric.dbc

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.dbc
      push:
        - meta_scope: meta.brackets.dbc
        - match: \]
          scope: punctuation.section.brackets.end.dbc
          pop: true
        - include: eol-arguments

  expression-seperators:
    - match: '{{sp}}*,{{sp}}*'
      scope: punctuation.separator.dbc
    - match: '{{sp}}*:$\n'
      scope: punctuation.separator.dbc

  operand-seperators:
    - match: '{{sp}}+{{operands}}'
      scope: support.type.dbc

  eol-arguments:
    - include: arguments
    - match: (?<!^)$\n
      pop: true

  arguments:
    - include: expression-seperators
    - match: '{{numbers}}'
      scope: constant.numeric.dbc
    - match: '~{{valid_functions}}'
      scope: variable.function.dbc
    - match: '({{valid_variables}})(\=)'
      captures:
        1: variable.parameter.dbc
        2: keyword.operator.assignment.dbc
    - match: '({{valid_variables}})'
      captures:
        1: variable.other.dbc
    - match: \(
      scope: punctuation.section.parentheses.begin.dbc
      push: arg-parens


  arg-parens:
    - meta_scope: meta.parens.arguments.dbc
    - match: \)
      scope: punctuation.section.parentheses.end.dbc
      pop: true
    - include: parentheses-body
    - match: \(
      scope: punctuation.section.parentheses.begin.dbc
      push: arg-parens
    - match: '{{sp}}*:$\n'
      scope: punctuation.separator.dbc
    - match: (?<!^)$\n
      scope: invalid.illegal.dbc
      pop: true

  function-keywords:
    - include: call-keywords
    - match: '{{pre}}((?i)(return|noreturn){{end}})'
      captures:
        1: keyword.control.flow.dbc
      push:

        - match: "{{sp}}+"
          set: eol-if-keyword
        - match: ''
          pop: true
    - match: '{{pre}}(?i)(goto)({{sp}}+{{valid_functions}})'
      captures:
        1: keyword.control.flow.dbc
        2: variable.function.dbc
      push:
        - meta_scope: meta.function-call.dbc
        - match: '{{sp}}'
          set: eol-if-keyword
        - match: '(?<!^)$\n'
          pop: true

  call-keywords:
    - match: '{{pre}}(?i)(call)({{sp}}+{{valid_functions}})'
      captures:
        1: keyword.control.flow.dbc
        2: variable.function.dbc
      push:
      - meta_scope: meta.function-call.dbc
      - match: (?<!^)$\n
        pop: true
      - match: '{{sp}}+(?i)with{{sp}}+'
        scope: support.type.dbc
        set:
          - meta_scope: meta.function-call.arguments.dbc
          - include: eol-arguments
      - match: '{{sp}}'
        set: eol-if-keyword
      - match: ''
        pop: true

    - match: '{{pre}}((?i)(branch|perform){{end}})'
      captures:
        1: keyword.control.flow.dbc
      push:
        - meta_scope: meta.function-call.dbc
        - match: '{{sp}}+{{valid_variables}}'
          scope: variable.other.dbc
          set:
            - meta_scope: meta.function-call.arguments.dbc
            - include: expression-seperators
            - match: '{{valid_functions}}'
              scope: variable.function.dbc
            - include: operand-seperators
            - match: (?<!^)$\n
              pop: true

  support-functions:
    - match: '{{pre}}((?i)setflag{{end}})'
      captures:
        1: support.function.builtin.dbc
      push:
        - match: '{{sp}}+{{constants}}'
          scope: constant.language.dbc
        - match: (?<!^)$\n
          pop: true

    - match: '{{pre}}((?i)(load|store){{end}})'
      captures:
        1: support.function.builtin.dbc
      push:
        - meta_scope: meta.arguments.dbc
        - match: '{{sp}}+{{valid_variables}}'
          scope: variable.other.dbc
          set:
            - include: expression-seperators
            - match: '{{valid_variables}}'
              scope: variable.other.dbc
            - include: operand-seperators
            - match: (?<!^)$\n
              pop: true

    - match: '{{pre}}((?i)(display|print){{end}})'
      captures:
        1: support.function.builtin.dbc
      push:
        - include: arguments
        - match: (?<!^)$\n
          pop: true

    # function x
    - match: '{{pre}}({{system_functions1}}){{sp}}'
      captures:
        1: support.function.builtin.dbc
      push:
        - match: '{{numbers}}'
          scope: constant.numeric.dbc
        - match: '{{valid_variables}}'
          scope: variable.other.dbc
        - match: (?<!^)$\n
          pop: true


    # function x,y,z
    - match: '{{pre}}({{system_functions2}}){{sp}}'
      captures:
        1: support.function.builtin.dbc
      push:
        - include: arguments
        - match: (?<!^)$\n
          pop: true

    # function x to y
    - match: '{{pre}}({{system_functions3}}){{sp}}'
      captures:
        1: support.function.builtin.dbc
      push:
        - match: '{{numbers}}'
          scope: constant.numeric.dbc
        - match: '{{valid_variables}}'
          scope: variable.other.dbc
        - include: operand-seperators
        - match: (?<!^)$\n
          pop: true

    # function x to y,z,...
    - match: '{{pre}}({{system_functions4}}){{sp}}'
      captures:
        1: support.function.builtin.dbc
      push:
        - include: arguments
        - include: operand-seperators
        - match: (?<!^)$\n
          pop: true

    # function x to y [giving z]


  verb-call:
    - match: '{{pre}}({{valid_functions}}){{sp}}'
      captures:
        1: variable.function.dbc
      push:
        - meta_scope: meta.function-call.dbc
        - match: ''
          set:
            - meta_scope: meta.function-call.arguments.dbc
            - include: eol-arguments
