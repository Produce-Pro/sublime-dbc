%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: dbc
file_extensions:
  - PRG
  - TXT
  - VRB
scope: source.dbc

variables:
  # Characters that break up variables/functions
  brk: '[^\(\)\[\]\w~]'
  sp: '[ \t]'
  numbers: '(-)?(([0-9]+\.[0-9]+)|(\.[0-9]+)|([0-9]+))'
  operands: '((?i)by|to|of|from|using|with|in|into)'
  constants: '(?i)not|eos|over|less|zero'
  pre: ^{{sp}}+
  file_types: 'file|ifile|afile'
  valid_functions: '[[:alpha:]_\$][[:alnum:]_\.\$@]*'
  valid_variables: '[[:alpha:]_\$][[:alnum:]_\.\$@]*'
  assignment_keywords: 'move|to|with'

contexts:

  prototype:
    - include: line-comments
    - include: strings

  main:
    - include: variable-punctuation
    - include: routine-definition
    - include: label-definition
    - include: variable-definitions
    - include: statements


  statements:
    - match: '{{pre}}'
      push:
        - meta_scope: meta.generic.statement.dbc
        - include: compiler-directive
        - include: keywords
        - include: call_function
        - match: $\n
          pop: true

  variable-punctuation:
    - match: \$\.
      scope: punctuation.definition.variable.dbc

  line-comments:
    # Comments begin with a [# .] and finish at the end of the line
    - match: '^[\.\*]'
      scope: punctuation.definition.comment.dbc
      push:
        - meta_scope: comment.line.dbc
        - match: $\n
          pop: true

  eol-comments:
    - match: ''
      set:
        - meta_scope: comment.line.dbc
        - match: $\n
          pop: true

  eol-invalid:
    - match: ''
      set:
        - meta_scope: invalid.illegal.dbc
        - match: $\n
          pop: true
# ((?i)break|switch|case|continue|do|else|for|if|return|switch|while|endif|loop|until|repeat|endswitch)'

  # switch
  # if
  # invalid keywords when not in those

  keywords:

    - include: if-keyword
    - include: switch-keyword
    - include: loop-keyword
    - include: for-keyword


  if-keyword:
    - match: (?i)if\b
      scope: keyword.control.dbc
      push: if-parameters

  if-parameters:
    - match: '{{constants}}'
      scope: constant.language.dbc
    - match: $\n
      set: if-keyword-body
    # - match: \W
    #   set: eol-invalid

  if-keyword1:
    - match: '{{sp}}*{{valid_variables}}'
      scope: variable.other.dbc
      set: if-keyword3
    - include: eol-invalid

  if-keyword3:
    - match: '\n'
      set: if-keyword-body
    - include: eol-invalid

  if-keyword-body:
    - meta_scope: meta.control.if.dbc
    - match: '{{pre}}(?i)endif'
      scope: keyword.control.dbc
      pop: true
    - match: '{{pre}}(?i)else if'
      scope: keyword.control.dbc
      set: if-parameters
    - match: '{{pre}}(?i)else'
      scope: keyword.control.dbc
    - include: main

  eol-if-keyword:
    - match: (?i)if
      scope: keyword.control.dbc
      push:
        - meta_scope: meta.control.if.dbc
        # - include: parentheses
        - include: flag-constants
        - match: $\n
          pop: true
    - match: ''
      pop: true

  loop-keyword:
    - match: (?i)loop
      scope: keyword.control.dbc
      push:
        - meta_scope: meta.control.loop.dbc
        - match: '{{pre}}(?i)repeat'
          scope: keyword.control.dbc
          pop: true
        - include: interloop-keywords
        - include: main

  interloop-keywords:
    - match: '{{pre}}(?i)continue|break|until'
      scope: keyword.control.dbc
      push:
        - match: "{{sp}}+"
          push: eol-if-keyword
        - match: ''
          pop: true

  for-keyword:
    - match: (?i)for\b
      scope: keyword.control.dbc
      push: for-keyword1

  for-keyword1:
    - meta_scope: meta.control.for.parameters.dbc
    - match: '{{sp}}*{{valid_variables}}'
      scope: variable.other.dbc
      set: for-keyword2
    - include: eol-invalid

  for-keyword2:
    - match: '{{sp}}+{{operands}}'
      scope: constant.other.placeholder.dbc
      set: for-keyword3
    - include: eol-invalid

  for-keyword3:
    - match: '{{sp}}+{{valid_variables}}'
      scope: variable.other.dbc
      set: for-keyword4
    - match: '{{sp}}+{{numbers}}'
      set: for-keyword4
    - include: eol-invalid

  for-keyword4:
    - match: '{{sp}}+{{operands}}'
      scope: constant.other.placeholder.dbc
      set: for-keyword5
    - include: eol-invalid

  for-keyword5:
    - meta_scope: meta.control.for.parameters.dbc
    - match: '{{sp}}+{{valid_variables}}'
      scope: variable.other.dbc
      set: for-keyword-body
    - match: '{{sp}}+{{numbers}}'
      set: for-keyword-body
    - include: eol-invalid

  for-keyword-body:
    - match: \n
      set:
        - meta_scope: meta.control.for.dbc
        - match: '{{pre}}(?i)repeat'
          scope: keyword.control.dbc
          pop: true
        - include: interloop-keywords
        - include: main
    - include: eol-invalid

  switch-keyword:
    - match: (?i)switch\b
      scope: keyword.control.dbc
      set: switch-keyword1

  switch-keyword1:
    - match: '{{sp}}*{{valid_variables}}'
      scope: variable.other.dbc
      set: switch-keyword3
    - include: eol-invalid

  switch-keyword3:
    - match: '\n'
      set: switch-keyword-body
    - include: eol-invalid

  switch-keyword-body:
    - meta_scope: meta.control.switch.dbc
    - match: '{{pre}}(?i)endswitch'
      scope: keyword.control.dbc
      pop: true
    - match: '{{pre}}(?i)case'
      scope: keyword.control.dbc
      push: case-keyword-parameters
    - match: '{{pre}}(?i)default'
      scope: keyword.control.dbc
    - include: main

  case-keyword-parameters:
    - meta_scope: meta.control.case.dbc
    - match: 'OR|\|'
      scope: keyword.operator.arithmetic.c
    - match: '{{numbers}}'
      scope: constant.numeric.dbc
    - match: '~{{valid_functions}}'
      scope: variable.function.dbc
    - match: '{{valid_variables}}'
      scope: variable.other.dbc
    - match: $\n
      pop: true


  control-keywords:
    - match: (?i)(endif|repeat|loop|endswitch)
      scope: keyword.control.dbc
      push:
        - include: eol-comments
        - match: $\n
          pop: true
    - match: (?i)break|continue|until|return|goto
      scope: keyword.control.dbc
      push:
        - include: conditional-keywords
        - match: $\n
          pop: true


  flag-constants:
    - match: '{{constants}}'
      scope: constant.language.dbc

  number-constants:
    - match: '{{numbers}}'
      scope: constant.numeric.dbc

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.dbc
      push:
        - meta_scope: meta.brackets.dbc
        - match: \]
          scope: punctuation.section.brackets.end.dbc
          pop: true

        - include: parameters


  parentheses:
    - match: \(
      scope: punctuation.section.parentheses.begin.dbc
      push:
        - meta_scope: meta.parentheses.dbc
        - match: \)
          scope: punctuation.section.parentheses.end.dbc
          pop: true
        - include: number-constants


  variable-definitions:
    - include: standard-types
    - include: label-types
    - include: list-types

  standard-types:
    - include: constant-types
    - include: character-types
    - include: numeric-types

  address-var-modifier:
    - match: \s\@
      scope: storage.modifier.dbc

  compiler-directive:
    - match: '[\#\%]'
      scope: storage.modifier.dbc
      set:
        - match: '(?i)(ifz|ifnz|ifdef|ifdef|ifdef|ifndef|ifndef|ifndef|iflabel|ifnlabel|elseif|if)'
          scope: storage.modifier.dbc
          set:
            - include: parameters

        - match: '(?i)(else|endif)'
          scope: storage.modifier.dbc
          set:
            - include: eol-comments

  constant-types:
    - match: (^{{valid_variables}})(\s+((?i)(define|equ)))
      captures:
        1: entity.name.constant.dbc
        2: storage.modifier.dbc

      push:
        - meta_scope: meta.type.constant.dbc
        - match: '{{sp}}{{numbers}}'
          scope: constant.numeric.dbc
        - match: '$\n'
          pop: true
        - include: eol-comments

  character-types:
    - match: (^{{valid_variables}})(\s+((?i)char|dim|init))
      captures:
        1: entity.name.type.dbc
        2: storage.type.dbc

      push:
        - meta_scope: meta.type.dbc
        - match: '{{sp}}{{numbers}}'
          scope: constant.numeric.dbc
          set:
            - include: brackets
            - match: ', (?i)initial'
              scope: storage.modifier.dbc
              set: parameters
            - include: eol-comments
        - match: \s\@
          scope: storage.modifier.dbc
          set:
            - include: brackets
            - match: ', (?i)initial'
              scope: storage.modifier.dbc
              set: parameters
            - include: eol-comments
        - match: $\n
          pop: true

  numeric-types:
    - match: (^{{valid_variables}})(\s+((?i)form|num|int|float))
      captures:
        1: entity.name.type.dbc
        2: storage.type.dbc

      push:
        - meta_scope: meta.type.dbc
        - match: '{{sp}}{{numbers}}'
          scope: constant.numeric.dbc
          set:
            - include: brackets
            - match: ', '
              scope: storage.modifier.dbc
              set: parameters
            - include: eol-comments
        - match: \s\@
          scope: storage.modifier.dbc
          set:
            - include: brackets
            - match: ', '
              scope: storage.modifier.dbc
              set: parameters
            - include: eol-comments
        - match: $\n
          pop: true

  label-types:
    - match: (^{{valid_variables}})((?i)\s+(external|label))
      captures:
        1: entity.name.function.dbc
        2: storage.type.dbc
      push:
        - match: '$\n'
          pop: true
        - include: address-var-modifier
        - include: eol-comments

  list-types:
    - match: (^{{valid_variables}})((?i)\s+((?i)list))
      captures:
        1: entity.name.list.dbc
        2: storage.type.dbc
      push:
        - meta_scope: meta.list.dbc
        - match: \s\@
          scope: storage.modifier.dbc
          pop: true
        - match: '$\n'
          set:
          - meta_scope: meta.list.dbc
          - match: '^{{sp}}+(?i)\s(listend)'
            scope: storage.type.dbc
            pop: true
          - include: standard-types


    # Strings begin and end with quotes, and use pound signs as an escape
    # character
  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.dbc
      push:
        - meta_scope: string.quoted.double.dbc
        - match: '\#.'
          scope: constant.character.escape.dbc
        - match: '"'
          scope: punctuation.definition.string.end.dbc
          pop: true


  operators:
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    - match: \+|\-|/|%|\||\^|~|!|\*
      scope: keyword.operator.arithmetic.c
    - match: \=
      scope: keyword.operator.assignment.c

  expression-seperators:
    - match: '\s*,\s*'
      scope: punctuation.separator.dbc
    - match: \s*:$\n
      scope: punctuation.separator.dbc

  seperators:
    - include: expression-seperators
    - match: '{{operands}}'
      scope: constant.other.placeholder


  label-definition:
    - match: ^{{valid_functions}}\n
      scope: entity.name.function.dbc

  routine-definition:
    - match: (^{{valid_functions}}\s+((?i)(routine|lroutine)))
      captures:
        1: entity.name.function.dbc
        2: storage.type.routine.start.dbc
      push:
        - routine-definition-body
        - routine-definition-parameters

  routine-definition-parameters:
    - match: $\n
      pop: true
    - match: '{{sp}}'
      set:
      - meta_scope: meta.routine.parameters.dbc
      - match: ({{valid_variables}}|~{{valid_functions}})
        scope: variable.parameter.dbc
      - include: expression-seperators
      - match: '$\n'
        pop: true


  routine-definition-body:
    - meta_scope: meta.routine.body.dbc
    - match: '{{pre}}(?i)endroutine'
      scope: storage.type.routine.end.dbc
      set: eol-comments
    - include: main


  parameters:
    - match: '{{numbers}}'
      scope: constant.numeric.dbc
    - meta_scope: meta.parameters.dbc
    - include: expression-seperators
    - match: '~{{valid_functions}}'
      scope: variable.function.dbc
    - match: '{{valid_variables}}'
      scope: variable.other.dbc
    - match: $\n
      pop: true

  verb_call:
    - match: '^\s+{{valid_functions}}'
      scope: variable.function

  call_function:
    - match: (?i)(call)(\s{{valid_functions}})
      captures:
        1: support.function.dbc
        2: variable.function.call.dbc
    - match: $\n
      pop: true
    - match: \s(?i)with\s
      scope: constant.other.placeholder
      set: parameters
    - match: ''
      set:
        - meta_scope: meta.function-call.dbc
        - include: conditional-keywords
        - match: ''
          pop: true

